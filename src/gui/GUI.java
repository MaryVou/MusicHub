/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import basics.Artist;
import basics.Release;
import db.Database;
import files.APIWrapper;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.json.JSONException;

/**
 *
 * @author manoslysi
 */
public class GUI extends javax.swing.JFrame {

    String defaultSource = "MusicBrainz.org";
    String defaultCountry = "(none)";
    String defaultLimit = "25";
   
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        WarningMsg = new java.awt.Label();
        MainPage = new javax.swing.JPanel();
        Name = new javax.swing.JLabel();
        SearchBtn = new javax.swing.JButton();
        Type = new javax.swing.JComboBox();
        SearchBar = new javax.swing.JTextField();
        AdvancedSettings = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        AdvancedTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CountryOption = new javax.swing.JTextField();
        CancelBtn = new javax.swing.JButton();
        ConfirmBtn = new javax.swing.JButton();
        ResetBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        LimitOption = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        WarningMsg.setAlignment(java.awt.Label.CENTER);
        WarningMsg.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        WarningMsg.setText("Please enter a value to proceed");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(WarningMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(WarningMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MusicHub");
        getContentPane().setLayout(new java.awt.CardLayout());

        MainPage.setBackground(new java.awt.Color(153, 153, 255));
        MainPage.setLayout(null);

        Name.setFont(new java.awt.Font("FreeSans", 1, 48)); // NOI18N
        Name.setForeground(new java.awt.Color(153, 153, 255));
        Name.setText("MusicHub");
        MainPage.add(Name);
        Name.setBounds(12, 12, 334, 77);

        SearchBtn.setText("Search");
        SearchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });
        MainPage.add(SearchBtn);
        SearchBtn.setBounds(1440, 30, 90, 30);

        Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Release", "Artist" }));
        Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeActionPerformed(evt);
            }
        });
        MainPage.add(Type);
        Type.setBounds(1340, 30, 91, 30);

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });
        SearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SearchBarKeyPressed(evt);
            }
        });
        MainPage.add(SearchBar);
        SearchBar.setBounds(820, 30, 510, 30);

        AdvancedSettings.setForeground(new java.awt.Color(153, 153, 255));
        AdvancedSettings.setText("Advanced Settings");
        AdvancedSettings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AdvancedSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AdvancedSettingsMouseClicked(evt);
            }
        });
        MainPage.add(AdvancedSettings);
        AdvancedSettings.setBounds(820, 70, 168, 17);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setResizable(false);
            Table.getColumnModel().getColumn(1).setResizable(false);
            Table.getColumnModel().getColumn(2).setResizable(false);
            Table.getColumnModel().getColumn(3).setResizable(false);
            Table.getColumnModel().getColumn(4).setResizable(false);
            Table.getColumnModel().getColumn(5).setResizable(false);
        }

        MainPage.add(jScrollPane2);
        jScrollPane2.setBounds(13, 110, 1500, 690);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/texture-990104_1920.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        MainPage.add(jLabel2);
        jLabel2.setBounds(0, 0, 2010, 1280);

        getContentPane().add(MainPage, "card2");

        AdvancedTab.setPreferredSize(new java.awt.Dimension(1920, 1080));
        AdvancedTab.setLayout(null);

        jLabel1.setFont(new java.awt.Font("FreeSans", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Advanced Settings");
        AdvancedTab.add(jLabel1);
        jLabel1.setBounds(0, 90, 1440, 51);

        jLabel3.setForeground(new java.awt.Color(204, 204, 255));
        jLabel3.setText("Country:");
        AdvancedTab.add(jLabel3);
        jLabel3.setBounds(500, 230, 130, 30);

        CountryOption.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        CountryOption.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CountryOption.setText("(none)");
        AdvancedTab.add(CountryOption);
        CountryOption.setBounds(800, 230, 173, 30);

        CancelBtn.setText("Cancel");
        CancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });
        AdvancedTab.add(CancelBtn);
        CancelBtn.setBounds(500, 530, 99, 29);

        ConfirmBtn.setText("Confirm");
        ConfirmBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmBtnActionPerformed(evt);
            }
        });
        AdvancedTab.add(ConfirmBtn);
        ConfirmBtn.setBounds(810, 530, 173, 29);

        ResetBtn.setText("Reset");
        ResetBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBtnActionPerformed(evt);
            }
        });
        AdvancedTab.add(ResetBtn);
        ResetBtn.setBounds(670, 530, 138, 29);

        jLabel4.setForeground(new java.awt.Color(204, 204, 255));
        jLabel4.setText("Limit (1-100):");
        AdvancedTab.add(jLabel4);
        jLabel4.setBounds(500, 400, 88, 30);

        LimitOption.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LimitOption.setText("25");
        AdvancedTab.add(LimitOption);
        LimitOption.setBounds(800, 400, 173, 30);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/texture-990104_1920.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        AdvancedTab.add(jLabel5);
        jLabel5.setBounds(0, 0, 1920, 1080);

        getContentPane().add(AdvancedTab, "card3");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
               Vector tmp = new Vector();
        
         DefaultTableModel result = (DefaultTableModel)Table.getModel();
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue( "" );  
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "" );
                   
                    th.repaint();
         th.repaint();
         Table.setRowHeight(50);
        String name = SearchBar.getText();
        String type = Type.getSelectedItem().toString();
        //DefaultListModel<String> dlm = new DefaultListModel();
//        String value = SourceOption.getSelectedItem().toString();
        //System.out.println(value);
        int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }
        if (!name.equals("")) {
            if (type.equals("Artist")) {
                //.setText("Name | Type | Country | Begin Date | End Date | ID | Aliases | Tags");
                
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Country" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Begin Date" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "End Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "ID" );
                   
                    th.repaint();
                
                
//                System.out.println(SourceOption);
               
                    ArrayList<Artist> allArtists = null;
                    try {
                        allArtists = APIWrapper.getArtist(name,defaultCountry,defaultLimit);
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParseException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (int counter = 0; counter < allArtists.size(); counter++) {
                        tmp.add(allArtists.get(counter).getName());
                        tmp.add(allArtists.get(counter).getType());
                        tmp.add(allArtists.get(counter).getCountry());
                        tmp.add(allArtists.get(counter).getBeginDate());
                        tmp.add(allArtists.get(counter).getEndDate());
                        tmp.add(allArtists.get(counter).getIDA());
                        
                        result.addRow(tmp);
                        tmp = new Vector();
                    }
                   
        } else if (type.equals("Release")) {
            
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Release" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Status" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "Format" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "Release Date" );
                    
                    th.repaint();
            
              //  System.out.println("Test2");
                ArrayList<Release> allReleases = null;
                try {
                    allReleases = APIWrapper.getRelease(name,defaultCountry, defaultLimit);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int counter = 0; counter < allReleases.size(); counter++) {
                   
                    tmp.add(allReleases.get(counter).getTitle());
                    tmp.add(allReleases.get(counter).getType());
                    tmp.add(allReleases.get(counter).getArtistName());
                    tmp.add(allReleases.get(counter).getStatus());
                    tmp.add(allReleases.get(counter).getFormat());
                    tmp.add(allReleases.get(counter).getReleaseDate());
                    result.addRow(tmp);
                    tmp = new Vector();
                }
             
          
        }
       
        }  
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void AdvancedSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AdvancedSettingsMouseClicked
        MainPage.setVisible(false);
        AdvancedTab.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_AdvancedSettingsMouseClicked

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        AdvancedTab.setVisible(false);     // TODO add your handling code here:
        CountryOption.setText(defaultCountry);
        //SourceOption.setSelectedItem(defaultSource);
        LimitOption.setText(defaultLimit);
        MainPage.setVisible(true);
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void ConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmBtnActionPerformed
       defaultCountry = CountryOption.getText();
       //defaultSource = SourceOption.getSelectedItem().toString();
       defaultLimit = LimitOption.getText();
       
       AdvancedTab.setVisible(false);
       MainPage.setVisible(true);
    }//GEN-LAST:event_ConfirmBtnActionPerformed

    private void ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBtnActionPerformed
      defaultCountry = "(none)";
      defaultSource = "MusicBrainz.org";
      defaultLimit = "25";
      CountryOption.setText(defaultCountry);
      //SourceOption.setSelectedItem(defaultSource);
      LimitOption.setText(defaultLimit);
    }//GEN-LAST:event_ResetBtnActionPerformed

    private void TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeActionPerformed
        
    }//GEN-LAST:event_TypeActionPerformed

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void SearchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            
            Vector tmp = new Vector();
        
         DefaultTableModel result = (DefaultTableModel)Table.getModel();
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue( "" );  
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "" );
                    
                    th.repaint();
         th.repaint();
         Table.setRowHeight(50);
        String name = SearchBar.getText();
        String type = Type.getSelectedItem().toString();
        //DefaultListModel<String> dlm = new DefaultListModel();
        //String value = SourceOption.getSelectedItem().toString();
        //System.out.println(value);
        int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }
        if (!name.equals("")) {
            if (type.equals("Artist")) {
                //.setText("Name | Type | Country | Begin Date | End Date | ID | Aliases | Tags");
                
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Country" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Begin Date" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "End Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "ID" );
                    
                    th.repaint();
                
                
                
                    ArrayList<Artist> allArtists = null;
                    try {
                        allArtists = APIWrapper.getArtist(name,defaultCountry,defaultLimit);
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParseException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (int counter = 0; counter < allArtists.size(); counter++) {
                        tmp.add(allArtists.get(counter).getName());
                        tmp.add(allArtists.get(counter).getType());
                        tmp.add(allArtists.get(counter).getCountry());
                        tmp.add(allArtists.get(counter).getBeginDate());
                        tmp.add(allArtists.get(counter).getEndDate());
                        tmp.add(allArtists.get(counter).getIDA());
                        result.addRow(tmp);
                        tmp = new Vector();
                    }
                    
                
        } else if (type.equals("Release")) {
            
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Release" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Status" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "Format" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "Release Date" );
                    
                    th.repaint();
            
                ArrayList<Release> allReleases = null;
                try {
                    allReleases = APIWrapper.getRelease(name,defaultCountry, defaultLimit);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int counter = 0; counter < allReleases.size(); counter++) {
                    tmp.add(allReleases.get(counter).getTitle());
                    tmp.add(allReleases.get(counter).getType());
                    tmp.add(allReleases.get(counter).getArtistName());
                    tmp.add(allReleases.get(counter).getStatus());
                    tmp.add(allReleases.get(counter).getFormat());
                    tmp.add(allReleases.get(counter).getReleaseDate());
                    result.addRow(tmp);
                    tmp = new Vector();
                }
            
        }
        }   
            
            
            
        }    // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new GUI().setVisible(true);
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    int x = (int)screenSize.getWidth();
                    int y = (int)screenSize.getHeight();
                    GUI tmp = new GUI();
                    tmp.setSize(x,y);
                    tmp.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AdvancedSettings;
    private javax.swing.JPanel AdvancedTab;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JButton ConfirmBtn;
    private javax.swing.JTextField CountryOption;
    private javax.swing.JTextField LimitOption;
    private javax.swing.JPanel MainPage;
    private javax.swing.JLabel Name;
    private javax.swing.JButton ResetBtn;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox Type;
    private java.awt.Label WarningMsg;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
