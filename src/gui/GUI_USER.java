/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import basics.Artist;
import basics.Release;
import db.Database;
import files.APIWrapper;
import static gui.FirstPages.st;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.json.JSONException;

/**
 *
 * @author manoslysi
 */
public class GUI_USER extends javax.swing.JFrame {
    String defaultSource = "MusicBrainz.org";
    String defaultCountry = "(none)";
    String defaultLimit = "25";
    boolean isActive=false;
    private String username;
    static Connection conn= Database.getConn();
    static Statement st;
    static ResultSet rs;
    private Object SearchBarKeyPressed;
    private int favoriteTab=0; //0 means we are not in any of the lists,1 means we have the release list, 2 means we have the artist list
    /**
     * Creates new form GUI_USER
     */
    public GUI_USER() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        MainPage = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        SearchBar = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        SelectBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Type = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        AdvancedSettings = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        SourceOption = new javax.swing.JComboBox();
        CountryOption = new javax.swing.JTextField();
        LimitOption = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        CancelBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        jTable1.setBackground(new java.awt.Color(204, 204, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MusicHub");
        getContentPane().setLayout(new java.awt.CardLayout());

        MainPage.setBackground(new java.awt.Color(153, 153, 255));
        MainPage.setPreferredSize(new java.awt.Dimension(1920, 1080));
        MainPage.setLayout(null);

        jLabel1.setFont(new java.awt.Font("FreeSans", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 255));
        jLabel1.setText("MusicHub");
        MainPage.add(jLabel1);
        jLabel1.setBounds(12, 12, 296, 85);

        SearchBar.setBackground(new java.awt.Color(204, 204, 255));
        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });
        SearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SearchBarKeyPressed(evt);
            }
        });
        MainPage.add(SearchBar);
        SearchBar.setBounds(770, 30, 560, 30);

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        MainPage.add(Search);
        Search.setBounds(1440, 30, 80, 30);

        SelectBtn.setText("Select All");
        SelectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectBtnActionPerformed(evt);
            }
        });
        MainPage.add(SelectBtn);
        SelectBtn.setBounds(1400, 110, 110, 30);

        jLabel2.setForeground(new java.awt.Color(153, 153, 255));
        jLabel2.setText("Advanced Settings");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        MainPage.add(jLabel2);
        jLabel2.setBounds(770, 70, 128, 17);

        Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Release", "Artist" }));
        MainPage.add(Type);
        Type.setBounds(1340, 30, 97, 30);

        jButton3.setText("Add Selected  to Favorites");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        MainPage.add(jButton3);
        jButton3.setBounds(1170, 110, 220, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setResizable(false);
            Table.getColumnModel().getColumn(1).setResizable(false);
            Table.getColumnModel().getColumn(2).setResizable(false);
            Table.getColumnModel().getColumn(3).setResizable(false);
            Table.getColumnModel().getColumn(4).setResizable(false);
            Table.getColumnModel().getColumn(5).setResizable(false);
            Table.getColumnModel().getColumn(6).setResizable(false);
        }

        MainPage.add(jScrollPane2);
        jScrollPane2.setBounds(12, 146, 1500, 660);

        jButton2.setText("Show Favorite Releases");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        MainPage.add(jButton2);
        jButton2.setBounds(10, 110, 210, 30);

        jButton5.setText("Show Favorite Artists");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        MainPage.add(jButton5);
        jButton5.setBounds(230, 110, 190, 30);

        removeBtn.setText("Remove Selected");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });
        MainPage.add(removeBtn);
        removeBtn.setBounds(980, 110, 180, 30);
        removeBtn.setEnabled(false);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/texture-990104_1920.jpg"))); // NOI18N
        jLabel3.setText(">");
        MainPage.add(jLabel3);
        jLabel3.setBounds(0, 0, 1570, 850);

        getContentPane().add(MainPage, "card2");

        AdvancedSettings.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Advanced Settings");
        AdvancedSettings.add(jLabel4);
        jLabel4.setBounds(0, 80, 1570, 43);

        jLabel5.setForeground(new java.awt.Color(204, 204, 255));
        jLabel5.setText("Draw Results from:");
        AdvancedSettings.add(jLabel5);
        jLabel5.setBounds(520, 280, 154, 27);

        jLabel6.setForeground(new java.awt.Color(204, 204, 255));
        jLabel6.setText("Limit(1-100):");
        AdvancedSettings.add(jLabel6);
        jLabel6.setBounds(520, 450, 134, 30);

        jLabel7.setForeground(new java.awt.Color(204, 204, 255));
        jLabel7.setText("Country:");
        AdvancedSettings.add(jLabel7);
        jLabel7.setBounds(520, 360, 134, 30);

        SourceOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MusicBrainz.org", "Database" }));
        SourceOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceOptionActionPerformed(evt);
            }
        });
        AdvancedSettings.add(SourceOption);
        SourceOption.setBounds(940, 280, 148, 27);

        CountryOption.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CountryOption.setText("(none)");
        AdvancedSettings.add(CountryOption);
        CountryOption.setBounds(940, 360, 150, 30);

        LimitOption.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LimitOption.setText("25");
        LimitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimitOptionActionPerformed(evt);
            }
        });
        AdvancedSettings.add(LimitOption);
        LimitOption.setBounds(940, 450, 150, 30);

        jButton1.setText("Confirm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        AdvancedSettings.add(jButton1);
        jButton1.setBounds(960, 680, 140, 29);

        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });
        AdvancedSettings.add(CancelBtn);
        CancelBtn.setBounds(520, 680, 110, 29);

        jButton4.setText("Reset Default");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        AdvancedSettings.add(jButton4);
        jButton4.setBounds(810, 680, 140, 29);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/texture-990104_1920.jpg"))); // NOI18N
        jLabel8.setText("jLabel8");
        AdvancedSettings.add(jLabel8);
        jLabel8.setBounds(0, 0, 1920, 1080);

        getContentPane().add(AdvancedSettings, "card3");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        Vector tmp = new Vector();
        favoriteTab=0;
        removeBtn.setEnabled(false);
         DefaultTableModel result = (DefaultTableModel)Table.getModel();
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue( "" );  
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "" );
                    th.repaint();
        // th.repaint();
         Table.setRowHeight(50);
        String name = SearchBar.getText();
        String type = Type.getSelectedItem().toString();
        //DefaultListModel<String> dlm = new DefaultListModel();
        String value = SourceOption.getSelectedItem().toString();
        //System.out.println(value);
        int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }
        if (!name.equals("")) {
            if (type.equals("Artist")) {
                //.setText("Name | Type | Country | Begin Date | End Date | ID | Aliases | Tags");
                
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Country" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Begin Date" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "End Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "ID" );
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "Select" );
                    th.repaint();
                
                
                //System.out.println(SourceOption);
                if (value.equals("MusicBrainz.org")) {
                    ArrayList<Artist> allArtists = null;
                    try {
                        allArtists = APIWrapper.getArtist(name,defaultCountry,defaultLimit);
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParseException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (int counter = 0; counter < allArtists.size(); counter++) {
                        tmp.add(allArtists.get(counter).getName());
                        tmp.add(allArtists.get(counter).getType());
                        tmp.add(allArtists.get(counter).getCountry());
                        tmp.add(allArtists.get(counter).getBeginDate());
                        tmp.add(allArtists.get(counter).getEndDate());
                        tmp.add(allArtists.get(counter).getIDA());
               
                        result.addRow(tmp);
                        tmp = new Vector();
                    }
                    try{
                        for (int counter = 0; counter < allArtists.size(); counter++) {
                            Database.insertArtistObject(allArtists.get(counter));
                            
                        }
                        
                    }catch(Exception E){
                        System.out.println("Couldn't load to database");
                    }
                    
                }else if (value.equals("Database")) {
                    ArrayList<Artist> allArtists = null;
                try {
                    if (Database.Connect() == true) {
                        if (Database.tableExist("ARTISTS") == false) {
                            Database.createArtistTable();
                        }
                        allArtists = Database.selectFromArtists(name);
                        
                        for (int counter = 0; counter < allArtists.size(); counter++) {
                            
                        tmp.add(allArtists.get(counter).getName());
                        tmp.add(allArtists.get(counter).getType());
                        tmp.add(allArtists.get(counter).getCountry());
                        tmp.add(allArtists.get(counter).getBeginDate());
                        tmp.add(allArtists.get(counter).getEndDate());
                        tmp.add(allArtists.get(counter).getIDA());
               
                        result.addRow(tmp);
                        tmp = new Vector();
                            //dlm.addElement(results.get(i).getName());
                        }
                        
                        //Database.Disconnect();
                    }
                    //ResultList.setModel(dlm);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        } else if (type.equals("Release")) {
            
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Release" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Artist" );
                    //tc = tcm.getColumn(3);
                    //tc.setHeaderValue( "Status" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Format" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "Release Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue("Release ID");
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "Select" );
                    th.repaint();
            
            //System.out.println("Test1");
            if (value.equals("MusicBrainz.org")) {
                //.out.println("Test2");
                ArrayList<Release> allReleases = null;
                try {
                    allReleases = APIWrapper.getRelease(name,defaultCountry, defaultLimit);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int counter = 0; counter < allReleases.size(); counter++) {
                   
                    tmp.add(allReleases.get(counter).getTitle());
                    tmp.add(allReleases.get(counter).getType());
                    tmp.add(allReleases.get(counter).getArtistName());
                    //tmp.add(allReleases.get(counter).getStatus());
                    tmp.add(allReleases.get(counter).getFormat());
                    tmp.add(allReleases.get(counter).getReleaseDate());
                    tmp.add(allReleases.get(counter).getIDR());
                    result.addRow(tmp);
                    
                    tmp = new Vector();
                }
                try{
                        for (int counter = 0; counter < allReleases.size(); counter++) {
                            //System.out.println("Insert Line");
                            Database.insertReleaseObject(allReleases.get(counter));
                            
                        }
                        
                    }catch(Exception E){
                        System.out.println("Couldn't load to database");
                    }
                //ResultList.setModel(dlm);
            } else if (value.equals("Database")) {
                
                
                      ArrayList<Release> allReleases = null;
                try {
                    if (Database.Connect() == true) {
                        if (Database.tableExist("RELEASES") == false) {
                            Database.createReleaseTable();
                        }
                        allReleases = Database.selectFromReleases(name);
                        //System.out.println("BLABLA");
                        for (int counter = 0; counter < allReleases.size(); counter++) {
                        
                        tmp.add(allReleases.get(counter).getTitle());
                       // System.out.println(tmp.get(0));
                        tmp.add(allReleases.get(counter).getType());
                        
                        if(allReleases.get(counter).getArtistName()!=null){
                            tmp.add(allReleases.get(counter).getArtistName());
                        }else{
                            tmp.add("");
                        }
                        //System.out.println(tmp.get(2));
//System.out.println(tmp.get(2));
                       // tmp.add(allReleases.get(counter).getStatus());
                        //System.out.println(tmp.get(3));
                        tmp.add(allReleases.get(counter).getFormat());
                        //System.out.println(tmp.get(3));
                        tmp.add(allReleases.get(counter).getReleaseDate());
                        //System.out.println(tmp.get(4));
                        tmp.add(allReleases.get(counter).getIDR());
                        //System.out.println(tmp.get(5));
                        
                        result.addRow(tmp);
                        
                        tmp = new Vector();
                            //dlm.addElement(results.get(i).getName());
                        }
                        
                        //Database.Disconnect();
                    }
                    //ResultList.setModel(dlm);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
       
        }        // TODO add your handling code here:
    }//GEN-LAST:event_SearchActionPerformed

    private void SourceOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceOptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SourceOptionActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        MainPage.setVisible(false);
        AdvancedSettings.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void LimitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimitOptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LimitOptionActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        AdvancedSettings.setVisible(false);     // TODO add your handling code here:
        CountryOption.setText(defaultCountry);
        SourceOption.setSelectedItem(defaultSource);
        LimitOption.setText(defaultLimit);
        MainPage.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      defaultCountry = "(none)";
      defaultSource = "MusicBrainz.org";
      defaultLimit = "25";
      CountryOption.setText(defaultCountry);
      SourceOption.setSelectedItem(defaultSource);
      LimitOption.setText(defaultLimit);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         defaultCountry = CountryOption.getText();
       defaultSource = SourceOption.getSelectedItem().toString();
       defaultLimit = LimitOption.getText();
 
       AdvancedSettings.setVisible(false);
       MainPage.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SelectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectBtnActionPerformed
        //i = Table.getRowCount();
        DefaultTableModel result = (DefaultTableModel)Table.getModel();
        if(!isActive){
            for(int i=0; i<result.getRowCount(); i++){
                result.setValueAt(true, i, 6);
            }
            SelectBtn.setText("Remove All");
            
        }else{
            for(int i=0; i<result.getRowCount(); i++){
                result.setValueAt(false, i, 6);
            }
            SelectBtn.setText("Select All");
        }
        isActive= !isActive;
//for(int k=0;k<i;k++){
            
        //}
// TODO add your handling code here:
    }//GEN-LAST:event_SelectBtnActionPerformed

    private void SearchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyPressed
        favoriteTab=0;
        removeBtn.setEnabled(false);
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        Vector tmp = new Vector();
        
         DefaultTableModel result = (DefaultTableModel)Table.getModel();
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue( "" );  
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "" );
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "" );
                    th.repaint();
         th.repaint();
         Table.setRowHeight(50);
        String name = SearchBar.getText();
        String type = Type.getSelectedItem().toString();
        //DefaultListModel<String> dlm = new DefaultListModel();
        String value = SourceOption.getSelectedItem().toString();
        //System.out.println(value);
        int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }
        if (!name.equals("")) {
            if (type.equals("Artist")) {
                //.setText("Name | Type | Country | Begin Date | End Date | ID | Aliases | Tags");
                
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Country" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Begin Date" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "End Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "ID" );
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "Select" );
                    th.repaint();
                
                
                //System.out.println(SourceOption);
                if (value.equals("MusicBrainz.org")) {
                    ArrayList<Artist> allArtists = null;
                    try {
                        allArtists = APIWrapper.getArtist(name,defaultCountry,defaultLimit);
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParseException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (int counter = 0; counter < allArtists.size(); counter++) {
                        tmp.add(allArtists.get(counter).getName());
                        tmp.add(allArtists.get(counter).getType());
                        tmp.add(allArtists.get(counter).getCountry());
                        tmp.add(allArtists.get(counter).getBeginDate());
                        tmp.add(allArtists.get(counter).getEndDate());
                        tmp.add(allArtists.get(counter).getIDA());
               
                        result.addRow(tmp);
                        tmp = new Vector();
                    }
                    try{
                        for (int counter = 0; counter < allArtists.size(); counter++) {
                            Database.insertArtistObject(allArtists.get(counter));
                            
                        }
                        
                    }catch(Exception E){
                        System.out.println("Couldn't load to database");
                    }
                    
                }else if (value.equals("Database")) {
                    ArrayList<Artist> allArtists = null;
                try {
                    
                  //  if (Database.Connect() == true) {
                       // if (Database.tableExist("ARTISTS") == false) {
                        //    Database.createArtistTable();
                        //}
                        allArtists = Database.selectFromArtists(name);
                        
                        for (int counter = 0; counter < allArtists.size(); counter++) {
                            
                        tmp.add(allArtists.get(counter).getName());
                        tmp.add(allArtists.get(counter).getType());
                        tmp.add(allArtists.get(counter).getCountry());
                        tmp.add(allArtists.get(counter).getBeginDate());
                        tmp.add(allArtists.get(counter).getEndDate());
                        tmp.add(allArtists.get(counter).getIDA());
               
                        result.addRow(tmp);
                        tmp = new Vector();
                            //dlm.addElement(results.get(i).getName());
                        }
                        
                        //Database.Disconnect();
                   // }
                    //ResultList.setModel(dlm);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        } else if (type.equals("Release")) {
            
                    th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Release" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Artist" );
                    //tc = tcm.getColumn(3);
                    //tc.setHeaderValue( "Status" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Format" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "Release Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue("Release ID");
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "Select" );
                    th.repaint();
            
            //System.out.println("Test1");
            if (value.equals("MusicBrainz.org")) {
                //System.out.println("Test2");
                ArrayList<Release> allReleases = null;
                try {
                    allReleases = APIWrapper.getRelease(name,defaultCountry, defaultLimit);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int counter = 0; counter < allReleases.size(); counter++) {
                   
                    tmp.add(allReleases.get(counter).getTitle());
                    tmp.add(allReleases.get(counter).getType());
                    tmp.add(allReleases.get(counter).getArtistName());
                    //tmp.add(allReleases.get(counter).getStatus());
                    tmp.add(allReleases.get(counter).getFormat());
                    tmp.add(allReleases.get(counter).getReleaseDate());
                    tmp.add(allReleases.get(counter).getIDR());
                    result.addRow(tmp);
                    
                    tmp = new Vector();
                }
                try{
                        for (int counter = 0; counter < allReleases.size(); counter++) {
                            //System.out.println("Insert Line");
                            Database.insertReleaseObject(allReleases.get(counter));
                            
                        }
                        
                    }catch(Exception E){
                        System.out.println("Couldn't load to database");
                    }
                //ResultList.setModel(dlm);
            } else if (value.equals("Database")) {
                
                
                      ArrayList<Release> allReleases = null;
                try {
                   // if (Database.Connect() == true) {
                       // if (Database.tableExist("RELEASES") == false) {
                       //     Database.createReleaseTable();
                       // }
                        allReleases = Database.selectFromReleases(name);
                        //System.out.println("release: "+allReleases.get(0).getTitle());
                        //System.out.println("BLABLA");
                        for (int counter = 0; counter < allReleases.size(); counter++) {
                        
                        tmp.add(allReleases.get(counter).getTitle());
                       // System.out.println(tmp.get(0));
                        tmp.add(allReleases.get(counter).getType());
                        
                        if(allReleases.get(counter).getArtistName()!=null){
                            tmp.add(allReleases.get(counter).getArtistName());
                        }else{
                            tmp.add("");
                        }
                        //System.out.println(tmp.get(2));
//System.out.println(tmp.get(2));
                       // tmp.add(allReleases.get(counter).getStatus());
                        //System.out.println(tmp.get(3));
                        tmp.add(allReleases.get(counter).getFormat());
                        //System.out.println(tmp.get(3));
                        tmp.add(allReleases.get(counter).getReleaseDate());
                       //System.out.println(tmp.get(4));
                        tmp.add(allReleases.get(counter).getIDR());
                      //  System.out.println(tmp.get(5));
                        
                        result.addRow(tmp);
                        
                        tmp = new Vector();
                            //dlm.addElement(results.get(i).getName());
                        }
                        
                        //Database.Disconnect();
                  //  }
                    //ResultList.setModel(dlm);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
       
        }     
        }      // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            DefaultTableModel result = (DefaultTableModel)Table.getModel();
            JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        String identifier = (String) tc.getHeaderValue();
            String sdf="1";
            if(identifier.equals("Release")){
                for(int i=0; i<result.getRowCount(); i++){

                    if(result.getValueAt(i, 6)!=null && (boolean)result.getValueAt(i, 6)){

                        String releaseID = (String) result.getValueAt(i, 5);
                       // System.out.println(releaseID);
                        String userID = FirstPages.getUsername();
                       // System.out.println(userID);
                        try {
                            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("SELECT COUNT(*) FROM LIKEDRELEASES WHERE USERID=\'");
                            select.append(userID);
                            select.append("\' AND RELEASEID=\'");
                            select.append(releaseID);
                            select.append("\'");
                            String select1 = select.toString();
                           // System.out.println(select1);
                            rs = st.executeQuery(select1);

                            while(rs.next()){
                                sdf = rs.getString("COUNT(*)");
                              //  System.out.println(sdf);
                            }
                            rs.close();
                            if(sdf.equals("0")){
                                    select =  new StringBuilder("INSERT INTO LIKEDRELEASES VALUES('");
                                    select.append(userID);
                                    select.append("','");
                                    select.append(releaseID);
                                    select.append("')");
                                    select1 = select.toString();
                                 //   System.out.println(select1);
                                    st.executeUpdate(select1);
                            }else{
                                //System.out.println("Already Liked");
                            }
                            sdf="1";
                        } catch (Exception e) {
                            System.err.println(e);

                        }    
                    }
                }
    }else if(identifier.equals("Artist")){
    
        for(int i=0; i<result.getRowCount(); i++){

                    if(result.getValueAt(i, 6)!=null && (boolean)result.getValueAt(i, 6)){

                        String releaseID = (String) result.getValueAt(i, 5);
                       // System.out.println(releaseID);
                        String userID = FirstPages.getUsername();
                       // System.out.println(userID);
                        try {
                            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("SELECT COUNT(*) FROM LIKEDARTISTS WHERE USERID=\'");
                            select.append(userID);
                            select.append("\' AND ARTISTID=\'");
                            select.append(releaseID);
                            select.append("\'");
                            String select1 = select.toString();
                           // System.out.println(select1);
                            rs = st.executeQuery(select1);

                            while(rs.next()){
                                sdf = rs.getString("COUNT(*)");
                              //  System.out.println(sdf);
                            }
                            rs.close();
                            if(sdf.equals("0")){
                                    select =  new StringBuilder("INSERT INTO LIKEDARTISTS VALUES('");
                                    select.append(userID);
                                    select.append("','");
                                    select.append(releaseID);
                                    select.append("')");
                                    select1 = select.toString();
                                //    System.out.println(select1);
                                    st.executeUpdate(select1);
                            }else{
                                //System.out.println("Already Liked");
                            }
                            sdf="1";
                        } catch (Exception e) {
                            System.err.println(e);

                        }    
                    }
                }
    
    
    
    }
            
            
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Vector tmp = new Vector();
        
         DefaultTableModel result = (DefaultTableModel)Table.getModel();
         Table.setRowHeight(50);
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        String userID = FirstPages.getUsername();
        TableColumn tc = tcm.getColumn(0);
        th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Release" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Artist" );
                    //tc = tcm.getColumn(3);
                    //tc.setHeaderValue( "Status" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Format" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "Release Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue("Release ID");
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "Select" );
                    th.repaint();
        try{
            st = conn.createStatement();
            st.executeQuery("commit");
        }catch(Exception E){
            System.out.println("Unable to commit");
        }              
        int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }            
        try{
            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("select * from users u join likedreleases l on u.userid=l.userid join releases r on r.id=l.releaseid where u.userid='");
                            select.append(userID);
                            select.append("\'");
                            String select1 = select.toString();
                           // System.out.println(select1);
                            rs = st.executeQuery(select1);
                            while(rs.next()){
                                tmp.add(rs.getString("TITLE"));
                                tmp.add(rs.getString("TYPE"));
                                tmp.add(rs.getString("ARTIST"));
                                tmp.add(rs.getString("FORMAT"));
                                tmp.add(rs.getString("RELEASE_DATE"));
                                tmp.add(rs.getString("ID"));
                                result.addRow(tmp);
                                tmp = new Vector();
                            }
                            rs.close();
            
            
            
        }catch( Exception  e){
            System.out.println("Couldn't return results");
        }   // TODO add your handling code here:
        favoriteTab=1;
        removeBtn.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
            Vector tmp = new Vector();
        
         DefaultTableModel result = (DefaultTableModel)Table.getModel();
         Table.setRowHeight(50);
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
        String userID = FirstPages.getUsername();
        TableColumn tc = tcm.getColumn(0);
        th.setSize(50,50);
                    tc = tcm.getColumn(0);
                    tc.setHeaderValue( "Artist" );
                    tc = tcm.getColumn(1);
                    tc.setHeaderValue( "Type" );
                    tc = tcm.getColumn(2);
                    tc.setHeaderValue( "Country" );
                    tc = tcm.getColumn(3);
                    tc.setHeaderValue( "Begin Date" );
                    tc = tcm.getColumn(4);
                    tc.setHeaderValue( "End Date" );
                    tc = tcm.getColumn(5);
                    tc.setHeaderValue( "ID" );
                    tc = tcm.getColumn(6);
                    tc.setHeaderValue( "Select" );
                    th.repaint();
                    
        try{
            st = conn.createStatement();
            st.executeQuery("commit");
        }catch(Exception E){
            System.out.println("Unable to commit");
        }            
          int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }          
        try{
            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("select * from users u join likedartists l on u.userid=l.userid join artists1 a on a.id=l.artistid where u.userid='");
                            select.append(userID);
                            select.append("\'");
                            String select1 = select.toString();
                           // System.out.println(select1);
                            rs = st.executeQuery(select1);
                            while(rs.next()){
                                tmp.add(rs.getString("NAME"));
                                tmp.add(rs.getString("TYPE"));
                                tmp.add(rs.getString("COUNTRY"));
                                tmp.add(rs.getString("BEGIN_DATE"));
                                tmp.add(rs.getString("END_DATE"));
                                tmp.add(rs.getString("ID"));
                                result.addRow(tmp);
                                tmp = new Vector();
                            }
            
                            rs.close();
            
        }catch( Exception  e){
            System.out.println("Couldn't return results");
        }          // TODO add your handling code here:
        favoriteTab=2;
        removeBtn.setEnabled(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        DefaultTableModel result = (DefaultTableModel)Table.getModel();
        Vector tmp = new Vector();
           // JTableHeader th = Table.getTableHeader();
        // TableColumnModel tcm = th.getColumnModel();
       // TableColumn tc = tcm.getColumn(0);
        //String identifier = (String) tc.getHeaderValue();
        if(favoriteTab==1){
            for(int i=0; i<result.getRowCount(); i++){

                    if(result.getValueAt(i, 6)!=null && (boolean)result.getValueAt(i, 6)){

                        String releaseID = (String) result.getValueAt(i, 5);
                        //.out.println(releaseID);
                        String userID = FirstPages.getUsername();
                       // System.out.println(userID);
                        try {
                            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("DELETE FROM LIKEDRELEASES WHERE USERID=\'");
                            select.append(userID);
                            select.append("\' AND RELEASEID=\'");
                            select.append(releaseID);
                            select.append("\'");
                            String select1 = select.toString();
                           // System.out.println(select1);
                            rs = st.executeQuery(select1);
                            rs.close();
                        } catch (Exception e) {
                            System.err.println(e);

                        }    
                    }
                }
            
            try{
            st = conn.createStatement();
            st.executeQuery("commit");
        }catch(Exception E){
            System.out.println("Unable to commit");
        }              
        int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }            
        try{
            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("select * from users u join likedreleases l on u.userid=l.userid join releases r on r.id=l.releaseid where u.userid='");
                            select.append(username);
                            select.append("\'");
                            String select1 = select.toString();
                            //System.out.println(select1);
                            rs = st.executeQuery(select1);
                            while(rs.next()){
                                tmp.add(rs.getString("TITLE"));
                                tmp.add(rs.getString("TYPE"));
                                tmp.add(rs.getString("ARTIST"));
                                tmp.add(rs.getString("FORMAT"));
                                tmp.add(rs.getString("RELEASE_DATE"));
                                tmp.add(rs.getString("ID"));
                                result.addRow(tmp);
                                tmp = new Vector();
                            }
                            rs.close();
            
            
        }catch( Exception  e){
            System.out.println("Couldn't return results");
        }
            
        
            
        }else if(favoriteTab==2){
            for(int i=0; i<result.getRowCount(); i++){

                    if(result.getValueAt(i, 6)!=null && (boolean)result.getValueAt(i, 6)){

                        String artistID = (String) result.getValueAt(i, 5);
                       // System.out.println(artistID);
                        String userID = FirstPages.getUsername();
                       // System.out.println(userID);
                        try {
                            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("DELETE FROM LIKEDARTISTS WHERE USERID=\'");
                            select.append(userID);
                            select.append("\' AND ARTISTID=\'");
                            select.append(artistID);
                            select.append("\'");
                            String select1 = select.toString();
                          //  System.out.println(select1);
                            rs = st.executeQuery(select1);
                            rs.close();
                        } catch (Exception e) {
                            System.err.println(e);

                        }    
                    }
                }
            
                for(int i=0; i<result.getRowCount(); i++){

                    if(result.getValueAt(i, 6)!=null && (boolean)result.getValueAt(i, 6)){

                        String releaseID = (String) result.getValueAt(i, 5);
                        //System.out.println(releaseID);
                        String userID = FirstPages.getUsername();
                       // System.out.println(userID);
                        try {
                            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("SELECT COUNT(*) FROM LIKEDARTISTS WHERE USERID=\'");
                            select.append(userID);
                            select.append("\' AND ARTISTID=\'");
                            select.append(releaseID);
                            select.append("\'");
                            String select1 = select.toString();
                           // System.out.println(select1);
                            rs = st.executeQuery(select1);
                            rs.close();
                        } catch (Exception e) {
                            System.err.println(e);

                        }    
                    }
                }
                
                try{
            st = conn.createStatement();
            st.executeQuery("commit");
        }catch(Exception E){
            System.out.println("Unable to commit");
        }            
          int rowCount = result.getRowCount();
        for(int y=rowCount-1;y>-1;y--){
            result.removeRow(y);
        }          
        try{
            st = conn.createStatement();
                            StringBuilder select =  new StringBuilder("select * from users u join likedartists l on u.userid=l.userid join artists1 a on a.id=l.artistid where u.userid='");
                            select.append(username);
                            select.append("\'");
                            String select1 = select.toString();
                          //  System.out.println(select1);
                            rs = st.executeQuery(select1);
                            while(rs.next()){
                                tmp.add(rs.getString("NAME"));
                                tmp.add(rs.getString("TYPE"));
                                tmp.add(rs.getString("COUNTRY"));
                                tmp.add(rs.getString("BEGIN_DATE"));
                                tmp.add(rs.getString("END_DATE"));
                                tmp.add(rs.getString("ID"));
                                result.addRow(tmp);
                                tmp = new Vector();
                            }
                            rs.close();
            
            
            
        }catch( Exception  e){
            System.out.println("Couldn't return results");
        }
        
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
            String ID;
            boolean isRelease;
            DefaultTableModel result = (DefaultTableModel)Table.getModel();
         JTableHeader th = Table.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
         TableColumn tc = tcm.getColumn(0);
         InfoTab tmp = new InfoTab();
            if(evt.getClickCount()==2){
               // System.out.println("Values: " + Table.getValueAt(1,5));
                int i = Table.getSelectedRow();
               // System.out.println("Value "+ Table.getValueAt(i, 5));
                tmp.setID((String)Table.getValueAt(i, 5));
                //System.out.println(Table.getSelectedRow());
                //(String)Table.getValueAt(Table.getSelectedRow(), 6);
                if(((String)tc.getHeaderValue()).equals("Release")){
                    tmp.setIsRelease(true);
                }else if(((String)tc.getHeaderValue()).equals("Artist")){
                    tmp.setIsRelease(false);
                }
                if(tmp.connect()){
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    int x = (int)screenSize.getWidth()/2;
                    int y = (int)screenSize.getHeight()/ 2;
                    tmp.setSize(430,590);
                    tmp.setResizable(false);
                    
                    
                    x=x-215;
                    y=y-295;
                    tmp.setLocation(x,y);
                    tmp.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    tmp.setVisible(true);
                    
                }
            }// TODO add your handling code here:
    }//GEN-LAST:event_TableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_USER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_USER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_USER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_USER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    int x = (int)screenSize.getWidth();
                    int y = (int)screenSize.getHeight();
                    GUI_USER tmp = new GUI_USER();
                    tmp.setSize(x,y);
                    tmp.setVisible(true);
                    
                    
            }
        });
    }
    
    public void setUsername(String username){
        this.username=username;
    }
    
    public static void hideInfo(InfoTab tmp){
                tmp.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdvancedSettings;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JTextField CountryOption;
    private javax.swing.JTextField LimitOption;
    private javax.swing.JPanel MainPage;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JButton SelectBtn;
    private javax.swing.JComboBox SourceOption;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox Type;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton removeBtn;
    // End of variables declaration//GEN-END:variables
}
